{
  "name": "ng-classify",
  "version": "4.0.2",
  "description": "Compile CoffeeScript classes to AngularJS modules",
  "author": {
    "name": "Cary Landholt",
    "email": "cary@landholt.com",
    "url": "https://github.com/CaryLandholt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/CaryLandholt/ng-classify"
  },
  "main": "index",
  "keywords": [
    "angularjs",
    "class",
    "coffeescript",
    "module"
  ],
  "license": "MIT",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "coffee-script": "^1.7.1",
    "loophole": "^1.0.0",
    "node.extend": "^1.0.10"
  },
  "devDependencies": {
    "conventional-changelog": "0.0.11",
    "gulp": "^3.8.0",
    "gulp-jasmine": "^1.0.0",
    "gulp-util": "^3.0.0"
  },
  "scripts": {
    "test": "gulp test"
  },
  "files": [
    "lib",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "index.coffee",
    "index.js",
    "LICENSE",
    "README.md"
  ],
  "readme": "# ng-classify\n[![License][license-image]][license-url]\n[![Version][version-image]][version-url]\n[![Build Status][build-image]][build-url]\n[![Dependency Status][dependencies-image]][dependencies-url]\n> Convert CoffeeScript classes to [AngularJS](http://angularjs.org/) modules  \n> Write less JavaScript.  Write less CoffeeScript.  Write less Angular.\n>\n> Watch the [screencast](https://www.youtube.com/watch?v=28gUTu9vnB4)  \n> [Demo](https://preview.c9.io/carylandholt/ng-classify-browserify/index.html)\n\n\n## Install\nInstall with [npm](https://npmjs.org/package/ng-classify)\n\n```bash\n$ npm install ng-classify\n```\n\n\n## Usage\n\n\n### CoffeeScript\n```coffee\nngClassify = require 'ng-classify'\n\ncontent = '''\nclass Home extends Controller\n\tconstructor: ($log) ->\n\t\t$log.info 'homeController instantiated'\n'''\n\nangularModule = ngClassify content\n```\n\n### JavaScript\n```javascript\nvar ngClassify = require('ng-classify');\n\nvar content = '\\\nclass Home extends Controller\\n\\\n\tconstructor: ($log) ->\\n\\\n\t\t$log.info \\'homeController instantiated\\'\\\n';\n\nvar angularModule = ngClassify(content);\n```\n\n\n### Gulp\n[gulp-ng-classify](https://www.npmjs.org/package/gulp-ng-classify)\n```bash\n$ npm install gulp-ng-classify\n```\n\n\n### Grunt\n[grunt-ng-classify](https://www.npmjs.org/package/grunt-ng-classify)\n```bash\n$ npm install grunt-ng-classify\n```\n\n\n## Table of Contents\n* [Install](#install)\n* [Usage](#usage)\n\t- [CoffeeScript](#coffeescript)\n\t- [JavaScript](#javascript)\n\t- [Gulp](#gulp)\n\t- [Grunt](#grunt)\n* [Overview](#overview)\n\t- [Why?](#why)\n\t- [How?](#how)\n\t- [CoffeeScript classes](#coffeescript-classes)\n\t- [Benefits](#benefits)\n\t- [Considerations](#considerations)\n\t- [Controller As Syntax](#controller-as-syntax)\n* [Module Types](#module-types)\n\t- [App](#app)\n\t- [Animation](#animation)\n\t- [Config](#config)\n\t- [Constant](#constant)\n\t- [Controller](#controller)\n\t- [Directive](#directive)\n\t- [Factory](#factory)\n\t- [Filter](#filter)\n\t- [Provider](#provider)\n\t- [Run](#run)\n\t- [Service](#service)\n\t- [Value](#value)\n* [Multiple Apps](#multiple-apps)\n* [API](#api)\n* [Contributing](#contributing)\n* [Changelog](#changelog)\n* [License](#license)\n\n\n## Overview\n[AngularJS](http://angularjs.org/) is well suited to take advantage of the [CoffeeScript class](http://coffeescript.org/#classes) syntax.\nHowever there's still a bit of boilerplate code we have to work through.\nng-classify addresses this.  *Note:  all examples are valid CoffeeScript.*\n\nHere's how you write a controller using ng-classify\n```coffee\nclass Admin extends Controller\n\tconstructor: ($scope, someService) ->\n\t\t$scope.coolMethod = someService.coolMethod()\n```\n\nwhich is equivalent to\n```javascript\nangular.module('app').controller('adminController', ['$scope', 'someService', function ($scope, someService) {\n\t$scope.coolMethod = someService.coolMethod();\n}]);\n```\n\n\n### Why?\nTake the following typical AngularJS controller declaration *(same as above)*\n```javascript\nangular.module('app').controller('adminController', ['$scope', 'someService', function ($scope, someService) {\n\t$scope.coolMethod = someService.coolMethod();\n}]);\n```\n\nSo what's wrong with this?\n* App name, `angular.module('app').controller`, is required within the declaration\n\t- some avoid this by the use of a global variable, `app.controller`, which is not good JavaScript hygiene\n* Parameter names are duplicated, one for the getters, `'$scope', 'someService'`, and one for the function parameters, `function ($scope, someService)`\n\t- this duplication is required to make the module minifiable\n\t- some avoid this by the use of [ngmin](https://github.com/btford/ngmin)\n* Depending upon the desired naming format, module type (`controller`) and module name (`adminController`) have duplication, due to the suffixed `controller` in this example\n* The function is anonymous (unnamed), making it more difficult to debug\n* Generally verbose\n\n\n### How?\nWrite AngularJS modules using the following syntaxes.\nNOTE: `{{}}` denotes placeholders\n```coffee\nclass {{appName}} extends {{Animation|Config|Controller|Directive|Factory|Filter|Provider|Run|Service}}\n\tconstructor: ({{params}}) ->\n\t\t# module body here\n```\n\nor\n```coffee\nclass {{name}} extends {{App|Constant|Value}}\n\tconstructor: ->\n\t\treturn {{value}}\n```\n\n\n### CoffeeScript Classes\nThe typical way to use CoffeeScript classes with AngularJS is as follows.\n```coffee\n# 203 characters\nclass AdminController\n\tconstructor: ($scope, someService) ->\n\t\t$scope.coolMethod = someService.coolMethod()\n\nangular.module('app').controller 'adminController', ['$scope', 'someService', AdminController]\n```\n\nwhich is equivalent to\n```javascript\n// 177 characters\nangular.module('app').controller('adminController', ['$scope', 'someService', function AdminController ($scope, someService) {\n\t$scope.coolMethod = someService.coolMethod();\n}]);\n```\n\nwith ng-classify, this is all you need\n```coffee\n# 116 characters\nclass Admin extends Controller\n\tconstructor: ($scope, someService) ->\n\t\t$scope.coolMethod = someService.coolMethod()\n```\n\n\n### Benefits\n* Removes unnecessary ceremonial code (`angular.module('app')`)\n* App name is not required when writing a module.  It is now configurable.\n* Parameters are needed only once via the `constructor` function.  No need for the array syntax to make your code minifiable.\n* No need to suffix the module name with the module type, e.g. my*Controller*, my*Ctrl*, etc.\n* The function is named, making debugging more convenient\n* The syntax is arguably concise.  Bring your code to the forefront with the elimination of cruft.\n\n\n### Considerations\n* To avoid the use of global variables, it is advised to use the `bare: false` CoffeeScript compilation option.  see [CoffeeScript Usage](http://coffeescript.org/#usage)\n\n\n### Controller As Syntax\nAngularJS provides two styles for writing and consuming controllers\n\n1. `$scope`\n2. `this` with `Controller as`\n\n`$scope` example\n```coffee\nclass Admin extends Controller\n\tconstructor: ($scope, someService) ->\n\t\t$scope.coolMethod = someService.coolMethod()\n```\n\nview for `$scope` example\n```html\n<div ng-controller=\"adminController\">\n\t<button ng-click=\"coolMethod()\">Cool It Down!</button>\n</div>\n```\n\n`this` example\n```coffee\nclass Admin extends Controller\n\tconstructor: (someService) ->\n\t\t@coolMethod = someService.coolMethod()\n```\n\nview for `this` example\n```html\n<div ng-controller=\"adminController as controller\">\n\t<button ng-click=\"controller.coolMethod()\">Cool It Down!</button>\n</div>\n```\n\n\n## Module Types\n\n\n### App\n*Although there is no AngularJS App module type, it is included for consistency.*\n```coffee\nclass App extends App\n\tconstructor: ->\n\t\treturn [\n\t\t\t'ngAnimate'\n\t\t\t'ngRoute'\n\t\t]\n```\n\nequivalent to\n```javascript\nangular.module('app', [\n\t'ngAnimate',\n\t'ngRoute'\n]);\n```\n\nYou may wish to use the `then` CoffeeScript syntax to highlight your code even more by eliminating the need for extra lines of code and indentation, as follows.  *Note:  this can be leveraged for any CoffeeScript class.*\n```coffee\nclass App extends App then constructor: -> return [\n\t'ngAnimate'\n\t'ngRoute'\n]\n```\n\n*Note:  the app name is configured via the [appName](#optionsappname) option, not the class name*\n\n\n### Animation\n```coffee\nclass MyCrazyFader extends Animation\n\tconstructor: ->\n\t\treturn {\n\t\t\tenter: (element, done) ->\n\t\t\t\t# run the animation here and call done when the animation is complete\n\n\t\t\t\tcancellation = (element) ->\n\t\t\t\t\t# this (optional) function will be called when the animation\n\t\t\t\t\t# completes or when the animation is cancelled (the cancelled\n\t\t\t\t\t# flag will be set to true if cancelled).\n\t\t}\n```\n\nequivalent to\n```javascript\nangular.module('app').animation('.my-crazy-fader', [function MyCrazyFader () {\n\treturn {\n\t\tenter: function (element, done) {\n\t\t\t// run the animation here and call done when the animation is complete\n\n\t\t\tvar cancellation = function (element) {\n\t\t\t\t// this (optional) function will be called when the animation\n\t\t\t\t// completes or when the animation is cancelled (the cancelled\n\t\t\t\t// flag will be set to true if cancelled).\n\t\t\t};\n\n\t\t\treturn cancellation;\n\t\t}\n\t};\n}]);\n```\n\n\n### Config\n```coffee\nclass Routes extends Config\n\tconstructor: ($routeProvider) ->\n\t\t$routeProvider\n\t\t.when '/home',\n\t\t\tcontroller: 'homeController'\n\t\t\ttemplateUrl: 'home.html'\n\t\t.when '/about',\n\t\t\tcontroller: 'aboutController'\n\t\t\ttemplateUrl: 'about.html'\n\t\t.otherwise\n\t\t\tredirectTo: '/home'\n```\n\nequivalent to\n```javascript\nangular.module('app').config(['$routeProvider', function Routes ($routeProvider) {\n\t$routeProvider\n\t.when('/home', {\n\t\tcontroller: 'homeController',\n\t\ttemplateUrl: 'home.html'\n\t})\n\t.when('/about', {\n\t\tcontroller: 'aboutController',\n\t\ttemplateUrl: 'about.html'\n\t})\n\t.otherwise({\n\t\tredirectTo: '/home'\n\t});\n}]);\n```\n\n\n### Constant\n```coffee\nclass HttpStatusCodes extends Constant\n\tconstructor: ->\n\t\treturn {\n\t\t\t'401': 'Unauthorized'\n\t\t\t'403': 'Forbidden'\n\t\t\t'404': 'Not Found'\n\t\t}\n```\n\nequivalent to\n```javascript\nangular.module('app').constant('HTTP_STATUS_CODES', {\n\t'401': 'Unauthorized',\n\t'403': 'Forbidden',\n\t'404': 'Not Found'\n});\n```\n\n\n### Controller\n*The example below uses the [this](#controller-as-syntax) syntax*\n```coffee\nclass Home extends Controller\n\tconstructor: (userService) ->\n\t\t@save = (username) ->\n\t\t\tuserService.addUser username\n```\n\nequivalent to\n```javascript\nangular.module('app').controller('homeController', ['userService', function Home (userService) {\n\tthis.save = function (username) {\n\t\treturn userService.addUser(username);\n\t};\n}]);\n```\n\n\n### Directive\n```coffee\nclass Dialog extends Directive\n\tconstructor: ->\n\t\treturn {\n\t\t\trestrict: 'E'\n\t\t\ttransclude: true\n\t\t\ttemplateUrl: 'dialog.html'\n\t\t}\n```\n\nequivalent to\n```javascript\nangular.module('app').directive('dialog', [function Dialog () {\n\treturn {\n\t\trestrict: 'E',\n\t\ttransclude: true,\n\t\ttemplateUrl: 'dialog.html'\n\t};\n}]);\n```\n\n\n### Factory\n```coffee\nclass Greeting extends Factory\n\tconstructor: ($log) ->\n\t\treturn {\n\t\t\tsayHello: (name) ->\n\t\t\t\t$log.info name\n\t\t}\n```\n\nequivalent to\n```javascript\nangular.module('app').factory('Greeting', ['$log', function Greeting ($log) {\n\treturn {\n\t\tsayHello: function (name) {\n\t\t\t$log.info(name);\n\t\t}\n\t};\n}]);\n```\n\nAnother nice feature is the ability to **return** classes\n```coffee\nclass User extends Factory\n\tconstructor: ($log) ->\n\t\treturn class UserInstance\n\t\t\tconstructor: (firstName, lastName) ->\n\t\t\t\t@getFullName = ->\n\t\t\t\t\t\"#{firstName} #{lastName}\"\n```\n\nusage\n```coffee\nuser = new User 'Cary', 'Landholt'\nfullName = user.getFullName() # Cary Landholt\n```\n\n\n### Filter\n```coffee\nclass Twitterfy extends Filter\n\tconstructor: ->\n\t\treturn (username) ->\n\t\t\t\"@#{username}\"\n```\n\nequivalent to\n```javascript\nangular.module('app').filter('twitterfy', [function Twitterfy () {\n\treturn function (username) {\n\t\treturn '@' + username;\n\t};\n}]);\n```\n\n\n### Provider\n```coffee\nclass Greetings extends Provider\n\tconstructor: ($log) ->\n\t\t@name = 'default'\n\n\t\t@$get = ->\n\t\t\tname = @name\n\n\t\t\tsayHello: ->\n\t\t\t\t$log.info name\n\n\t\t@setName = (name) ->\n\t\t\t@name = name\n```\n\nequivalent to\n```javascript\nangular.module('app').provider('greetingsProvider', ['$log', function Greetings ($log) {\n\tthis.name = 'default';\n\n\tthis.$get = function () {\n\t\tvar name = this.name;\n\n\t\treturn {\n\t\t\tsayHello: function () {\n\t\t\t\treturn $log.info(name);\n\t\t\t}\n\t\t};\n\t};\n\n\tthis.setName = function (name) {\n\t\treturn this.name = name;\n\t};\n}]);\n```\n\n\n### Run\n```coffee\nclass ViewsBackend extends Run\n\tconstructor: ($httpBackend) ->\n\t\t$httpBackend.whenGET(/^.*\\.(html|htm)$/).passThrough()\n```\n\nequivalent to\n```javascript\nangular.module('app').run(['$httpBackend', function ViewsBackend ($httpBackend) {\n\t$httpBackend.whenGET(/^.*\\.(html|htm)$/).passThrough();\n}]);\n```\n\n\n### Service\n```coffee\nclass Greeting extends Service\n\tconstructor: ($log) ->\n\t\t@sayHello = (name) ->\n\t\t\t$log.info name\n```\n\nequivalent to\n\n```javascript\nangular.module('app').service('greetingService', ['$log', function Greeting ($log) {\n\tthis.sayHello = function (name) {\n\t\treturn $log.info(name);\n\t};\n}]);\n```\n\n\n### Value\n```coffee\nclass People extends Value\n\tconstructor: ->\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: 'Luke Skywalker'\n\t\t\t\tage: 26\n\t\t\t}\n\t\t\t{\n\t\t\t\tname: 'Han Solo'\n\t\t\t\tage: 35\n\t\t\t}\n\t\t]\n```\n\nequivalent to\n\n```javascript\nangular.module('app').value('people',\n\t[\n\t\t{\n\t\t\tname: 'Luke Skywalker',\n\t\t\tage: 26\n\t\t}, {\n\t\t\tname: 'Han Solo',\n\t\t\tage: 35\n\t\t}\n\t]\n);\n```\n\n\n## Multiple Apps\nAlthough using multiple apps in an AngularJS application is unnecessary, some may\nstill wish to do so.\n\nSimply provide the app name as a parameter to the module type.\n\nIn the example below, a Controller is created within the 'common' app.\n```coffee\nclass Home extends Controller('common')\n\tconstructor: ($log) ->\n\t\t$log.info 'homeController instantiated'\n```\n\nequivalent to\n\n```javascript\nangular.module('common').controller('homeController', ['$log', function ($log) {\n\t$log.info('homeController instantiated');\n})];\n```\n\n\n## API\n\n\n### ngClassify(content, options)\n\n\n#### content\n*Required*  \nType: `String`  \nDefault: `undefined`  \n\nThe content that may contain CoffeeScript classes to convert to AngularJS modules\n\n\n#### options\nType: `Object`  \nDefault: `undefined`  \n\n\n##### options.appName\nType: `String`  \nDefault: `'app'`  \n\nThe name of the AngularJS app\n```javascript\n// for example\nangular.module('app')\n```\n\n\n##### options.prefix\nType: `String`  \nDefault: `''`  \n\nTo avoid potential collisions, the moduleType prefix may be set (ex: `options.prefix = 'Ng'`)\n```coffee\nclass Home extends Ng.Controller\n\tconstructor: ($log) ->\n\t\t$log.info 'homeController instantiated'\n```\n\n\n##### options.animation\nType: `Object`  \nDefault: `{format: 'spinalCase', prefix: '.'}`  \n\n\n##### options.constant\nType: `Object`  \nDefault: `{format: 'screamingSnakeCase'}`  \n\n\n##### options.controller\nType: `Object`  \nDefault: `{format: 'camelCase', suffix: 'Controller'}`  \n\n\n##### options.directive\nType: `Object`  \nDefault: `{format: 'camelCase'}`  \n\n\n##### options.factory\nType: `Object`  \nDefault: `{format: 'upperCamelCase'}`  \n\n\n##### options.filter\nType: `Object`  \nDefault: `{format: 'camelCase'}`  \n\n\n##### options.provider\nType: `Object`  \nDefault: `{format: 'camelCase', suffix: 'Provider'}`  \n\n\n##### options.service\nType: `Object`  \nDefault: `{format: 'camelCase', suffix: 'Service'}`  \n\n\n##### options.value\nType: `Object`  \nDefault: `{format: 'camelCase'}`  \n\n\n### Supported Formats\nFormat | Example\n--- | ---\n* | *no change*\ncamelCase | camelCase\nlowerCamelCase | lowerCamelCase\nlowerCase | lowercase\nscreamingSnakeCase | SCREAMING_SNAKE_CASE\nsnakeCase | snake_case\nspinalCase | spinal-case\ntrainCase | Train-Case\nupperCamelCase | UpperCamelCase\nupperCase | UPPERCASE\n\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## Changelog\nSee [CHANGELOG.md](CHANGELOG.md)\n\n\n## License\nSee [LICENSE](LICENSE)\n\n\n[build-image]:            http://img.shields.io/travis/CaryLandholt/ng-classify.svg?style=flat\n[build-url]:              http://travis-ci.org/CaryLandholt/ng-classify\n\n[dependencies-image]:     http://img.shields.io/gemnasium/CaryLandholt/ng-classify.svg?style=flat\n[dependencies-url]:       https://gemnasium.com/CaryLandholt/ng-classify\n\n[license-image]:          http://img.shields.io/badge/license-MIT-blue.svg?style=flat\n[license-url]:            LICENSE\n\n[version-image]:          http://img.shields.io/npm/v/ng-classify.svg?style=flat\n[version-url]:            https://npmjs.org/package/ng-classify\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/CaryLandholt/ng-classify/issues"
  },
  "homepage": "https://github.com/CaryLandholt/ng-classify",
  "_id": "ng-classify@4.0.2",
  "_from": "ng-classify@^4.0.2"
}
